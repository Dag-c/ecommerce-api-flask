version: "3.9"

services:
  postgres:
    image: postgres:14
    container_name: ecommerce-db
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER_PRODUCTION}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_PRODUCTION}
      - POSTGRES_DB=${POSTGRES_DB_PRODUCTION}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations/ecommerce_respaldo.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network

  redis:
    image: redis:7
    container_name: ecommerce-redis
    restart: always
    networks:
      - ecommerce-network

  api:
    build: .
    container_name: ecommerce-api
    restart: always
    environment:
      - POSTGRES_USER_PRODUCTION=${POSTGRES_USER_PRODUCTION}
      - POSTGRES_PASSWORD_PRODUCTION=${POSTGRES_PASSWORD_PRODUCTION}
      - POSTGRES_HOST_PRODUCTION=${POSTGRES_HOST_PRODUCTION}
      - POSTGRES_DB_PRODUCTION=${POSTGRES_DB_PRODUCTION}
      - SQLALCHEMY_TRACK_MODIFICATIONS=${SQLALCHEMY_TRACK_MODIFICATIONS}
      - SECRET_KEY=${SECRET_KEY}
      - REDIS_URL_PRODUCTION=${REDIS_URL_PRODUCTION}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - ecommerce-network

  nginx:
    image: nginx:latest
    container_name: ecommerce-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - api
    networks:
      - ecommerce-network

  certbot:
    image: certbot/certbot
    container_name: ecommerce-certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${CERTBOT_DOMAIN}
    networks:
      - ecommerce-network

volumes:
  pgdata:

networks:
  ecommerce-network:
